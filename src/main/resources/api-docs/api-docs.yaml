openapi: 3.0.1
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: JwtController
  description: Operations with jwt
- name: ProfileController
  description: operations with profile
- name: PostController
  description: crud of post
- name: AuthController
  description: Registration and Authorization
- name: SubscribeController
  description: action with subscription
- name: MediaController
  description: CRUD of media
paths:
  /subscribes:
    get:
      tags:
      - SubscribeController
      summary: get all user subscriptions
      operationId: getAllUserSubscriptions
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    put:
      tags:
      - SubscribeController
      summary: add user subscription
      operationId: subscribe
      parameters:
      - name: personEmail
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /profile/edit:
    put:
      tags:
      - ProfileController
      summary: edit profile
      description: edit all fields
      operationId: editProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /post/create:
    post:
      tags:
      - PostController
      operationId: createPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDto'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /media/file:
    post:
      tags:
      - MediaController
      summary: save avatar or backImg
      operationId: savePicture
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserMediaDto'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
      - MediaController
      summary: delete user profile file
      operationId: deletePicture_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMediaDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /jwt/refreshToken:
    post:
      tags:
      - JwtController
      summary: get refresh token
      description: generate refresh token and save it
      operationId: getRefreshToken
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /jwt/accessToken:
    post:
      tags:
      - JwtController
      summary: get access token
      description: generate access token and get
      operationId: getAccessToken
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /auth/signup:
    post:
      tags:
      - AuthController
      summary: Registration/Signup
      description: save login and credentials
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /auth/login:
    post:
      tags:
      - AuthController
      summary: Authorization/Login
      description: check if access token is right
      operationId: login
      parameters:
      - name: email
        in: query
        required: true
        schema:
          type: string
      - name: password
        in: query
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /subscribes/{likePattern}:
    get:
      tags:
      - SubscribeController
      summary: find subscriptions or subscribers by string
      operationId: findProperSubscriptionsOrSubscribersByString
      parameters:
      - name: likePattern
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /profile:
    get:
      tags:
      - ProfileController
      summary: get profile
      description: get all fields
      operationId: getProfileEmail
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /post:
    get:
      tags:
      - PostController
      operationId: getAllPostsByEmail
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /post/{postId}:
    get:
      tags:
      - PostController
      operationId: getPost
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /media/picture:
    get:
      tags:
      - MediaController
      summary: get picture
      description: Get picture itself
      operationId: getPicture
      parameters:
      - name: bucket
        in: query
        required: true
        schema:
          type: string
          enum:
          - post
          - avatar
          - background
      - name: folder
        in: query
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /post/file:
    delete:
      tags:
      - PostController
      summary: delete user profile file
      operationId: deletePicture
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMediaDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    UserProfileDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        refreshToken:
          type: string
        role:
          type: string
        name:
          type: string
        lastname:
          type: string
        birthDate:
          type: string
        gender:
          type: string
        title:
          type: string
        company:
          type: string
        specialization:
          type: string
        university:
          type: string
        location:
          type: string
        languages:
          type: array
          items:
            type: string
        avatar:
          type: string
        backPhoto:
          type: string
        phoneNumber:
          type: string
        roles:
          type: array
          items:
            type: string
            enum:
            - ADMIN
            - USER
    PostDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        email:
          type: string
        location:
          type: string
        creationDate:
          type: string
          format: date
        files:
          type: array
          items:
            type: string
            format: binary
    UserMediaDto:
      type: object
      properties:
        bucket:
          type: string
          enum:
          - post
          - avatar
          - background
        file:
          type: string
          format: binary
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    DeleteMediaDto:
      type: object
      properties:
        fileName:
          type: string
        bucket:
          type: string
          enum:
          - post
          - avatar
          - background
